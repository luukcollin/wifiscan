[{"C:\\Users\\Luca\\Documents\\React\\wifiscan\\src\\reportWebVitals.js":"1","C:\\Users\\Luca\\Documents\\React\\wifiscan\\src\\index.js":"2","C:\\Users\\Luca\\Documents\\React\\wifiscan\\src\\Network.js":"3","C:\\Users\\Luca\\Documents\\React\\wifiscan\\src\\RealNetwork.js":"4"},{"size":362,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":513,"mtime":1606736012525,"results":"7","hashOfConfig":"6"},{"size":3122,"mtime":1606917934392,"results":"8","hashOfConfig":"6"},{"size":3625,"mtime":1606990375892,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1l1keut",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Luca\\Documents\\React\\wifiscan\\src\\reportWebVitals.js",[],"C:\\Users\\Luca\\Documents\\React\\wifiscan\\src\\index.js",[],"C:\\Users\\Luca\\Documents\\React\\wifiscan\\src\\Network.js",["19","20","21","22","23"],"import React, { Component } from \"react\";\r\nimport data from \"./data.json\";\r\nimport { List } from \"antd\";\r\nimport FlatList from \"flatlist-react\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport \"./style.css\";\r\n\r\nconst WEAK_SIGNAL = 30;\r\nconst MEDIUM_SIGNAL = 70;\r\nconst networkList = data.networks;\r\n\r\nclass Network extends Component {\r\n  // listy: [this.network1, this.network2, this.network3],\r\n  // listy2: ['hello', 'world', 'amazing']\r\n\r\n  state = {\r\n    ssid: \"\",\r\n    encryption: \"\",\r\n    strength: 0,\r\n  };\r\n\r\n  render() {\r\n    let listItemStyle = \"list-item-clicked\";\r\n\r\n    return (\r\n      /// <ul>{this.networks.listy2.map(network => <li>{network}</li>)}</ul>\r\n      <div>\r\n        <InfiniteScroll\r\n          pageStart={0}\r\n          hasMore={true || false}\r\n          useWindow={false}\r\n          loader={<div key={0}>Loading ...</div>}\r\n        ></InfiniteScroll>\r\n        <ul>\r\n          {\r\n            <List\r\n              dataSource={networkList}\r\n              renderItem={this.renderNetwork}\r\n            ></List>\r\n            /* <FlatList\r\n            list={networkList}\r\n            renderItem={this.renderNetwork}\r\n            renderWhenEmpty={() => <div>List is empty!</div>}\r\n            sortBy={[\"strength\", { key: \"strength\", descending: false }]}\r\n            scroll={true}\r\n            sortDescending\r\n            renderOnScroll\r\n          /> */\r\n          }\r\n          {this.sortedByStrength(networkList).map((network, i) => {\r\n            return (\r\n              <div\r\n                key={i}\r\n                onClick={() => {\r\n                  this.onLick(network);\r\n                }}\r\n                className={this.listItemStyle}\r\n              >\r\n                <li>\r\n                  <h3>\r\n                    {network.strength} {network.ssid} {network.encryption}\r\n                  </h3>\r\n                </li>\r\n              </div>\r\n            );\r\n          })}\r\n        </ul>\r\n        <input type=\"password\" id=\"password\" />\r\n        <button onClick={this.getPassword}>Scan!</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderNetwork = (network, i) => {\r\n    return (\r\n      <div className={this.listItemStyle}>\r\n        <li key={i}>\r\n          {this.getSignalImage(network.strength)}\r\n          <b>{network.ssid}</b> (<span>{network.encryption}</span>)\r\n        </li>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  getPassword() {\r\n    console.log(\"azebi\");\r\n    console.log(document.getElementById(\"password\"));\r\n  }\r\n\r\n  sortedByStrength(list) {\r\n    return list.sort(function (a, b) {\r\n      return b.strength - a.strength;\r\n    });\r\n  }\r\n\r\n  onLick(network) {\r\n    console.log(network.ssid);\r\n  }\r\n\r\n  renderItem(key, index) {\r\n    return <div key={key}>{networkList[index].ssid}</div>;\r\n  }\r\n\r\n  getSignalImage(strength) {\r\n    if (strength <= WEAK_SIGNAL) {\r\n      return \"Weak\";\r\n      return \"../public/img/strongSignal.png\";\r\n    } else if (strength > MEDIUM_SIGNAL) {\r\n      return \"Strong\";\r\n      return \"/../public/img/strongSignal.png\";\r\n    } else {\r\n      return \"Medium\";\r\n      return \"/../public/img/strongSignal.png\";\r\n    }\r\n  }\r\n}\r\n\r\nexport default Network;\r\n","C:\\Users\\Luca\\Documents\\React\\wifiscan\\src\\RealNetwork.js",["24","25","26","27"],{"ruleId":"28","severity":1,"message":"29","line":4,"column":8,"nodeType":"30","messageId":"31","endLine":4,"endColumn":16},{"ruleId":"28","severity":1,"message":"32","line":23,"column":9,"nodeType":"30","messageId":"31","endLine":23,"endColumn":22},{"ruleId":"33","severity":1,"message":"34","line":107,"column":7,"nodeType":"35","messageId":"36","endLine":107,"endColumn":47},{"ruleId":"33","severity":1,"message":"34","line":110,"column":7,"nodeType":"35","messageId":"36","endLine":110,"endColumn":48},{"ruleId":"33","severity":1,"message":"34","line":113,"column":7,"nodeType":"35","messageId":"36","endLine":113,"endColumn":48},{"ruleId":"37","severity":1,"message":"38","line":103,"column":5,"nodeType":"39","endLine":103,"endColumn":24},{"ruleId":"33","severity":1,"message":"34","line":123,"column":7,"nodeType":"35","messageId":"36","endLine":123,"endColumn":47},{"ruleId":"33","severity":1,"message":"34","line":126,"column":7,"nodeType":"35","messageId":"36","endLine":126,"endColumn":48},{"ruleId":"33","severity":1,"message":"34","line":129,"column":7,"nodeType":"35","messageId":"36","endLine":129,"endColumn":48},"no-unused-vars","'FlatList' is defined but never used.","Identifier","unusedVar","'listItemStyle' is assigned a value but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression"]